package com.serverstarted.cat.ext.druid;

import java.sql.SQLException;

import com.alibaba.druid.filter.FilterAdapter;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import com.dianping.cat.Cat;
import com.dianping.cat.message.Event;
import com.dianping.cat.message.Transaction;

public class DruidCatFilter extends FilterAdapter {

    @Override
    public boolean preparedStatement_execute(final FilterChain chain, final PreparedStatementProxy statement)
            throws SQLException {

        return filterStatement(chain, statement, statement.getSql(), new Callback<Boolean>() {
            public Boolean execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.preparedStatement_execute(chain, statement);
            }
        });
    }

    @Override
    public ResultSetProxy preparedStatement_executeQuery(final FilterChain chain, final PreparedStatementProxy statement)
            throws SQLException {
        return filterStatement(chain, statement, statement.getSql(), new Callback<ResultSetProxy>() {
            public ResultSetProxy execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.preparedStatement_executeQuery(chain, statement);
            }
        });
    }

    @Override
    public int preparedStatement_executeUpdate(final FilterChain chain, final PreparedStatementProxy statement)
            throws SQLException {
        return filterStatement(chain, statement, statement.getSql(), new Callback<Integer>() {
            public Integer execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.preparedStatement_executeUpdate(chain, statement);
            }
        });
    }

    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql)
            throws SQLException {
        return filterStatement(chain, statement, sql, new Callback<Boolean>() {
            public Boolean execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_execute(chain, statement, sql);
            }
        });
    }

    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql,
            final int autoGeneratedKeys) throws SQLException {
        return filterStatement(chain, statement, sql, new Callback<Boolean>() {
            public Boolean execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_execute(chain, statement, sql, autoGeneratedKeys);
            }
        });
    }

    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql,
            final int[] columnIndexes) throws SQLException {

        return filterStatement(chain, statement, sql, new Callback<Boolean>() {
            public Boolean execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_execute(chain, statement, sql, columnIndexes);
            }
        });
    }

    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql,
            final String[] columnNames) throws SQLException {

        return filterStatement(chain, statement, sql, new Callback<Boolean>() {
            public Boolean execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_execute(chain, statement, sql, columnNames);
            }
        });
    }

    @Override
    public int[] statement_executeBatch(final FilterChain chain, final StatementProxy statement) throws SQLException {
        return filterStatement(chain, statement, statement.getBatchSql(), new Callback<int[]>() {
            public int[] execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeBatch(chain, statement);
            }
        });
    }

    @Override
    public ResultSetProxy statement_executeQuery(final FilterChain chain, final StatementProxy statement,
            final String sql) throws SQLException {
        return filterStatement(chain, statement, sql, new Callback<ResultSetProxy>() {
            public ResultSetProxy execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeQuery(chain, statement, sql);
            }
        });
    }

    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql)
            throws SQLException {
        return filterStatement(chain, statement, sql, new Callback<Integer>() {
            public Integer execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeUpdate(chain, statement, sql);
            }
        });
    }

    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql,
            final int autoGeneratedKeys) throws SQLException {

        return filterStatement(chain, statement, sql, new Callback<Integer>() {
            public Integer execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeUpdate(chain, statement, sql, autoGeneratedKeys);
            }
        });
    }

    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql,
            final int[] columnIndexes) throws SQLException {
        return filterStatement(chain, statement, sql, new Callback<Integer>() {
            public Integer execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeUpdate(chain, statement, sql, columnIndexes);
            }
        });
    }

    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql,
            final String[] columnNames) throws SQLException {

        return filterStatement(chain, statement, sql, new Callback<Integer>() {
            public Integer execute(Transaction transaction) throws SQLException {
                return DruidCatFilter.super.statement_executeUpdate(chain, statement, sql, columnNames);
            }
        });
    }

    private <T> T filterStatement(FilterChain chain, StatementProxy statement, String sql, Callback<T> callback)
            throws SQLException {
        Transaction trans = Cat.newTransaction("SQL", sql);
        Event event = Cat.newEvent("SQL.Execute", sql);
        for (int i = 0; i < statement.getParametersSize(); i++) {
            event.addData("param_" + i, statement.getParameter(i).getValue());
        }

        try {
            T result = callback.execute(trans);
            trans.setStatus(Transaction.SUCCESS);
            return result;
        } catch (SQLException e) {
            trans.setStatus(e);
            throw e;
        } finally {
            trans.complete();
        }
    }

    private static interface Callback<T> {
        T execute(Transaction transaction) throws SQLException;
    }

}
